// Code generated by MockGen. DO NOT EDIT.
// Source: src/pkg/usecase/contracts.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	domain "genesis_test_case/src/pkg/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMailingRepository is a mock of MailingRepository interface.
type MockMailingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMailingRepositoryMockRecorder
}

// MockMailingRepositoryMockRecorder is the mock recorder for MockMailingRepository.
type MockMailingRepositoryMockRecorder struct {
	mock *MockMailingRepository
}

// NewMockMailingRepository creates a new mock instance.
func NewMockMailingRepository(ctrl *gomock.Controller) *MockMailingRepository {
	mock := &MockMailingRepository{ctrl: ctrl}
	mock.recorder = &MockMailingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailingRepository) EXPECT() *MockMailingRepositoryMockRecorder {
	return m.recorder
}

// MultipleSending mocks base method.
func (m *MockMailingRepository) MultipleSending(message *domain.EmailMessage, adresses []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleSending", message, adresses)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipleSending indicates an expected call of MultipleSending.
func (mr *MockMailingRepositoryMockRecorder) MultipleSending(message, adresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleSending", reflect.TypeOf((*MockMailingRepository)(nil).MultipleSending), message, adresses)
}

// MockEmailStorage is a mock of EmailStorage interface.
type MockEmailStorage struct {
	ctrl     *gomock.Controller
	recorder *MockEmailStorageMockRecorder
}

// MockEmailStorageMockRecorder is the mock recorder for MockEmailStorage.
type MockEmailStorageMockRecorder struct {
	mock *MockEmailStorage
}

// NewMockEmailStorage creates a new mock instance.
func NewMockEmailStorage(ctrl *gomock.Controller) *MockEmailStorage {
	mock := &MockEmailStorage{ctrl: ctrl}
	mock.recorder = &MockEmailStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailStorage) EXPECT() *MockEmailStorageMockRecorder {
	return m.recorder
}

// AddEmail mocks base method.
func (m *MockEmailStorage) AddEmail(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEmail indicates an expected call of AddEmail.
func (mr *MockEmailStorageMockRecorder) AddEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmail", reflect.TypeOf((*MockEmailStorage)(nil).AddEmail), email)
}

// GetAllEmails mocks base method.
func (m *MockEmailStorage) GetAllEmails() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmails")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmails indicates an expected call of GetAllEmails.
func (mr *MockEmailStorageMockRecorder) GetAllEmails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmails", reflect.TypeOf((*MockEmailStorage)(nil).GetAllEmails))
}

// MockCryptoRepository is a mock of CryptoRepository interface.
type MockCryptoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoRepositoryMockRecorder
}

// MockCryptoRepositoryMockRecorder is the mock recorder for MockCryptoRepository.
type MockCryptoRepositoryMockRecorder struct {
	mock *MockCryptoRepository
}

// NewMockCryptoRepository creates a new mock instance.
func NewMockCryptoRepository(ctrl *gomock.Controller) *MockCryptoRepository {
	mock := &MockCryptoRepository{ctrl: ctrl}
	mock.recorder = &MockCryptoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoRepository) EXPECT() *MockCryptoRepositoryMockRecorder {
	return m.recorder
}

// GetCurrencyRate mocks base method.
func (m *MockCryptoRepository) GetCurrencyRate(pair *domain.CurrencyPair) (*domain.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyRate", pair)
	ret0, _ := ret[0].(*domain.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyRate indicates an expected call of GetCurrencyRate.
func (mr *MockCryptoRepositoryMockRecorder) GetCurrencyRate(pair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyRate", reflect.TypeOf((*MockCryptoRepository)(nil).GetCurrencyRate), pair)
}

// GetWeekAverageChart mocks base method.
func (m *MockCryptoRepository) GetWeekAverageChart(pair *domain.CurrencyPair) ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeekAverageChart", pair)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeekAverageChart indicates an expected call of GetWeekAverageChart.
func (mr *MockCryptoRepositoryMockRecorder) GetWeekAverageChart(pair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeekAverageChart", reflect.TypeOf((*MockCryptoRepository)(nil).GetWeekAverageChart), pair)
}

// MockCryptoBannerRepository is a mock of CryptoBannerRepository interface.
type MockCryptoBannerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoBannerRepositoryMockRecorder
}

// MockCryptoBannerRepositoryMockRecorder is the mock recorder for MockCryptoBannerRepository.
type MockCryptoBannerRepositoryMockRecorder struct {
	mock *MockCryptoBannerRepository
}

// NewMockCryptoBannerRepository creates a new mock instance.
func NewMockCryptoBannerRepository(ctrl *gomock.Controller) *MockCryptoBannerRepository {
	mock := &MockCryptoBannerRepository{ctrl: ctrl}
	mock.recorder = &MockCryptoBannerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoBannerRepository) EXPECT() *MockCryptoBannerRepositoryMockRecorder {
	return m.recorder
}

// GetCryptoBannerUrl mocks base method.
func (m *MockCryptoBannerRepository) GetCryptoBannerUrl(chart []float64, rate *domain.CurrencyRate) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCryptoBannerUrl", chart, rate)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCryptoBannerUrl indicates an expected call of GetCryptoBannerUrl.
func (mr *MockCryptoBannerRepositoryMockRecorder) GetCryptoBannerUrl(chart, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCryptoBannerUrl", reflect.TypeOf((*MockCryptoBannerRepository)(nil).GetCryptoBannerUrl), chart, rate)
}
